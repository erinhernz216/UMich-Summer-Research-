#Messing around with meta-analyses of Gemma output
#This file includes the code for comparing the differential expression output from different datasets and runing a meta-analysis (steps #6-10 mentioned below).  
#This is the fourth version of this file that includes one of the HDRF datasets as well (because the previous meta-analysis was being dominated by the suspicious CMS dataset with it's dubiously small sampling variances) as well as DG datasets (because I wanted to play with the code for adding dissection as a predictor to the model)
#At this point, I also started to functionalize things.
#Megan Hagenauer
#07-26-2022
#Associated R workspace: 
#save.image("~/Documents/Teaching/Grinnell Interns 2022/MetaAnalysis_HC_Stress_wHDRF_andDG_Fixed/Workspace_MetaAnalysis_HC_Stress_HDRFandDG_BugFixed.RData")


####################

#Goal:

#For practice, I decided to focus on hippocampal chronic stress datasets that weren't included in Yusra's HDRF meta-analysis

#I piggybacked on Jinglin Xiong's efforts triaging chronic stress datasets, using her spreadsheet: "ChronicStressData(after exclusion).xlsx"

#These were the hippocampal datasets that seemed to meet criteria (chronic adult stress):
#GSE59070 - chronic social stress (CSDS), "Ammon's horn", mouse, Agilent platform
#GSE86392 - chronic restraint stress, HC, rat, RNA-Seq - *has annotation issues*
#GSE116009 - CUMS, HC, mouse, RNA-Seq 
#GSE109315 -CSDS, ventral (V) HC - mouse, RNA-Seq
#GSE151807 - CMS, HC, mice, Affymetrix 430 2.0 - this dataset has a small sample size but suspiciously large t-stats - confounded?

#These are the datasets that I tried to add in to increase my sample size:
#included in our HDRF meta-analysis:
#GSE81672 - CSDS, HC - Bagot et al.
#GSE72343 - CSDS, "Ammon's Horn" - Bagot et al. - it turned out that this dataset didn't have Gemma Output that we could use because they had analyzed the data for all brain regions in the same model. We would need to re-run the analysis.

#And these are the DG datasets that I added, to experiment with adding dissection as a predictor variable:
#GSE56028 - unpredictable chronic mild stress (CUMS), Dentate Gyrus (DG)
#GSE132819 - CSDS, DG
#GSE84183 - CUMS, DG

#GSE84185 - CUMS, DG - it turns out this one is actually only anterior cingulate cortex


####################

#Overview of general coding steps:

#0) Reading in & visualizing the Log2 Expression data and Metadata for the individual samples - an illustration of where the differential expression results come from. 

#1) Read in the results from Gemma for each dataset

#2) Identify the results for the variables of interest

#3) Remove rows of data that have missing or unambiguous gene annotation

#### Question: Which gene annotation should we use? I was originally planning to use NCBI ID (because it is a little more stable than gene symbol), but if we use gene symbol we can run a half-way decent meta-analysis of data from both rats and mice without having to add in a step where we decode which genes in rats and mice are orthologous using an orthology database, as many mice and rat genes have the same gene symbol (76%, last time I checked).

#4) Collapse results (average) if there is more than row of data representing a single gene 

#5) Extract out the information needed for running a meta-analysis: Use the Log2FC and Tstat to calculate the standard error for the Log2FC, and then use the standard error to calculate the sampling variance.

#6) Combine together the relevant results from different studies into a single data-frame for the effect sizes (Log2FC) and a single data.frame for the sampling variances. 

#7) Make a correlation matrix to compare the overall results from the different studies. Further visualize the comparison using a hierarchically-clustered heatmap of the correlation matrix. Which studies seem to have similar results? 

#8) Run a meta-analysis using all of the effect sizes for each gene that has data from at least 2 studies. 

#9) Correct the meta-analysis output to take into account the fact that we are running the statistical calculations many times and therefore have a heightened risk of false discovery (false discovery rate correction) 

#10) Determine which are the top differentially expressed genes and create forest plots to visualize the effect sizes for those top differentially expressed genes across the different studies. 

#####################################

#Code packages used (may require installation & installation of dependencies):

library(plyr)
library(metafor)
library(reshape)
library(multtest)

######################################

#Set working directory:
setwd("~/Desktop/META-ANALYSIS FOLDER")

########################################

#6) Combine together the relevant results from different studies into a single data-frame for the effect sizes (Log2FC) and a single data.frame for the sampling variances. 

#The Log2FC values are the first element in the differential expression result object for each study
#The gene symbols are the row.names - 75% of gene symbols for rats and mice are the same, so for simplicity sake, instead of using a gene orthology database to inform equivalency, we're just going to align the datasets by gene symbol.


AligningDatasets<-function(ListOfDEResults){
  
  MetaAnalysis_FoldChange_Dfs<-list()
  
  for(i in c(1:length(ListOfDEResults))){
    MetaAnalysis_FoldChange_Dfs[[i]]<-data.frame(x=row.names(ListOfDEResults[[i]][[1]]),ListOfDEResults[[i]][[1]], stringsAsFactors=FALSE)
  }
  
  print("MetaAnalysis_FoldChange_Dfs:")
  print(str(MetaAnalysis_FoldChange_Dfs))
  
  MetaAnalysis_FoldChanges<<-join_all(MetaAnalysis_FoldChange_Dfs, by="x", type="full")
  #This function could be join_all (if there are more than 2 datasets) or merge/merge_all (if the plyr package isn't working)
  
  print("MetaAnalysis_FoldChanges:")
  print(str(MetaAnalysis_FoldChanges))
  
  MetaAnalysis_SV_Dfs<-list()
  
  for(i in c(1:length(ListOfDEResults))){
    MetaAnalysis_SV_Dfs[[i]]<-data.frame(x=row.names(ListOfDEResults[[i]][[4]]),ListOfDEResults[[i]][[4]], stringsAsFactors=FALSE)
  }
  
  print("MetaAnalysis_SV_Dfs:")
  print(str(MetaAnalysis_SV_Dfs))
  
  MetaAnalysis_SV<<-join_all(MetaAnalysis_SV_Dfs, by="x", type="full")
  #This function could be join_all (if there are more than 2 datasets) or merge/merge_all (if the plyr package isn't working)
  
  print("MetaAnalysis_SV:")
  print(str(MetaAnalysis_SV))
  
  rm(MetaAnalysis_SV_Dfs, MetaAnalysis_FoldChange_Dfs)
}

#Example Usage;

ListOfDEResults<-list(DEResults_GSE27532, DEResults_GSE47541, DEResults_GSE56028, DEResults_GSE61301, DEResults_GSE63469, DEResults_GSE84183)

#I just discovered that if I have datasets with *comparisons with the same name*, when I join the datasets some of those comparisons disappear. :(

AligningDatasets(ListOfDEResults)
# [1] "MetaAnalysis_FoldChange_Dfs:"
# List of 6
# $ :'data.frame':	18110 obs. of  2 variables:
#   ..$ x                               : chr [1:18110] "0610005K03Rik" "0610006F02Rik" "0610006I08Rik" "0610006K04Rik" ...
# ..$ GSE27532_Despipramine_vs_control: num [1:18110] 0.0573 -0.0338 0.022 0.0934 0.04 ...
# $ :'data.frame':	18520 obs. of  2 variables:
#   ..$ x                              : chr [1:18520] "0610031j06rik" "1200013a08rik" "1200013b22rik" "15-Sep" ...
# ..$ GSE47541_Venlafaxine_vs_control: num [1:18520] 0.0222 0.1745 0.1441 0.1615 0.1315 ...
# $ :'data.frame':	15617 obs. of  4 variables:
#   ..$ x                              : chr [1:15617] "A1bg" "A1cf" "A2m" "A3galt2" ...
# ..$ GSE56028_Fluoxetine_vs_Control : num [1:15617] -0.01397 0.1506 -0.04246 0.00956 -0.06863 ...
# ..$ GSE56028_Imipramine_vs_Control : num [1:15617] 0.0515 0.0602 -0.2672 0.0789 -0.0039 ...
# ..$ GSE56028_Agomelatine_vs_Control: num [1:15617] 0.121 -0.0832 -0.088 -0.052 -0.0643 ...
# $ :'data.frame':	15503 obs. of  2 variables:
#   ..$ x                              : chr [1:15503] "A1bg" "A1cf" "A2m" "A3galt2" ...
# ..$ GSE61301.Impiramine.vs..Control: num [1:15503] 0.0726 0.2531 0.2424 0.4038 -0.6501 ...
# $ :'data.frame':	18550 obs. of  3 variables:
#   ..$ x                                     : chr [1:18550] "0610005C13Rik" "0610009B22Rik" "0610009L18Rik" "0610010K14Rik" ...
# ..$ GSE84183_30.kg_Venlafaxine_vs_Control : num [1:18550] 0.2384 0.0695 0.0605 0.0921 0.0248 ...
# ..$ GSE84183_100.kg_Venlafaxine_vs_Control: num [1:18550] 0.0502 0.0408 0.1478 0.1317 0.0407 ...
# $ :'data.frame':	17337 obs. of  2 variables:
#   ..$ x                             : chr [1:17337] "0610009B22Rik" "0610009E02Rik" "0610009L18Rik" "0610010K14Rik" ...
# ..$ GSE84183_Fluoxetine_vs_Control: num [1:17337] -0.031787 -0.05775 -0.08009 -0.010669 -0.000273 ...
# NULL
# [1] "MetaAnalysis_FoldChanges:"
# 'data.frame':	45077 obs. of  10 variables:
#   $ x                                     : chr  "0610005K03Rik" "0610006F02Rik" "0610006I08Rik" "0610006K04Rik" ...
# $ GSE27532_Despipramine_vs_control      : num  0.0573 -0.0338 0.022 0.0934 0.04 ...
# $ GSE47541_Venlafaxine_vs_control       : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE56028_Fluoxetine_vs_Control        : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE56028_Imipramine_vs_Control        : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE56028_Agomelatine_vs_Control       : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE61301.Impiramine.vs..Control       : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE84183_30.kg_Venlafaxine_vs_Control : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE84183_100.kg_Venlafaxine_vs_Control: num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE84183_Fluoxetine_vs_Control        : num  NA NA NA NA NA NA NA NA NA NA ...
# NULL
# [1] "MetaAnalysis_SV_Dfs:"
# List of 6
# $ :'data.frame':	18110 obs. of  2 variables:
#   ..$ x                               : chr [1:18110] "0610005K03Rik" "0610006F02Rik" "0610006I08Rik" "0610006K04Rik" ...
# ..$ GSE27532_Despipramine_vs_control: num [1:18110] 0.00205 0.00289 0.0128 0.00815 0.00974 ...
# $ :'data.frame':	18520 obs. of  2 variables:
#   ..$ x                              : chr [1:18520] "0610031j06rik" "1200013a08rik" "1200013b22rik" "15-Sep" ...
# ..$ GSE47541_Venlafaxine_vs_control: num [1:18520] 0.00806 0.04064 0.01156 0.00626 0.01381 ...
# $ :'data.frame':	15617 obs. of  4 variables:
#   ..$ x                              : chr [1:15617] "A1bg" "A1cf" "A2m" "A3galt2" ...
# ..$ GSE56028_Fluoxetine_vs_Control : num [1:15617] 0.01342 0.01157 0.03081 0.00636 0.01018 ...
# ..$ GSE56028_Imipramine_vs_Control : num [1:15617] 0.01341 0.01157 0.03082 0.00636 0.01018 ...
# ..$ GSE56028_Agomelatine_vs_Control: num [1:15617] 0.01341 0.01157 0.03081 0.00636 0.01018 ...
# $ :'data.frame':	15503 obs. of  2 variables:
#   ..$ x                              : chr [1:15503] "A1bg" "A1cf" "A2m" "A3galt2" ...
# ..$ GSE61301.Impiramine.vs..Control: num [1:15503] 0.00237 0.02002 0.0372 0.03655 0.23678 ...
# $ :'data.frame':	18550 obs. of  3 variables:
#   ..$ x                                     : chr [1:18550] "0610005C13Rik" "0610009B22Rik" "0610009L18Rik" "0610010K14Rik" ...
# ..$ GSE84183_30.kg_Venlafaxine_vs_Control : num [1:18550] 4.32e-04 1.39e-04 9.32e-05 3.57e-03 2.23e-03 ...
# ..$ GSE84183_100.kg_Venlafaxine_vs_Control: num [1:18550] 4.32e-04 1.39e-04 9.32e-05 3.57e-03 2.23e-03 ...
# $ :'data.frame':	17337 obs. of  2 variables:
#   ..$ x                             : chr [1:17337] "0610009B22Rik" "0610009E02Rik" "0610009L18Rik" "0610010K14Rik" ...
# ..$ GSE84183_Fluoxetine_vs_Control: num [1:17337] 3.79e-05 2.21e-04 9.29e-05 4.63e-05 1.12e-05 ...
# NULL
# [1] "MetaAnalysis_SV:"
# 'data.frame':	45077 obs. of  10 variables:
#   $ x                                     : chr  "0610005K03Rik" "0610006F02Rik" "0610006I08Rik" "0610006K04Rik" ...
# $ GSE27532_Despipramine_vs_control      : num  0.00205 0.00289 0.0128 0.00815 0.00974 ...
# $ GSE47541_Venlafaxine_vs_control       : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE56028_Fluoxetine_vs_Control        : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE56028_Imipramine_vs_Control        : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE56028_Agomelatine_vs_Control       : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE61301.Impiramine.vs..Control       : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE84183_30.kg_Venlafaxine_vs_Control : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE84183_100.kg_Venlafaxine_vs_Control: num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE84183_Fluoxetine_vs_Control        : num  NA NA NA NA NA NA NA NA NA NA ...
# NULL

#I'm going to double-check that the row.names are still in the same order:
cbind(MetaAnalysis_FoldChanges$x, MetaAnalysis_SV$x)[c(1:100),]
#Looks good
sum(MetaAnalysis_FoldChanges$x==MetaAnalysis_SV$x)
#[1] 39058
sum(MetaAnalysis_FoldChanges$x!=MetaAnalysis_SV$x)
#[1] 0
#Looks good.


####################################

#7) Make a correlation matrix to compare the overall results from the different studies. Further visualize the comparison using a hierarchically-clustered heatmap of the correlation matrix. Which studies seem to have similar results? 

#We can generally compare the differential expression associated with different datasets or variable comparisons using a scatterplot and correlation analysis.

#The code for making scatterplots is very similar to the boxplot code that we used earlier. It uses a y~x formula, and can include many of the same parameters (e.g., x and y labels, color)

plot(MetaAnalysis_FoldChanges$GSE109315_StressResilient_Vs_Ctrl~MetaAnalysis_FoldChanges$GSE109315_StressSusceptible_Vs_Ctrl, ylab="Stress Resilient Log2FC", xlab="Stress Susceptible Log2FC" )

#Within this plot, each data point represents the differential expression results (log2FC) for a particular gene for two different comparisons: stress susceptible vs. no stress (x-axis) and stress resilient vs. no stress (y axis)

#From looking at this plot, we can see that, in general, if a gene shows a positive log2FC for the stress susceptible vs. no stress comparison (i.e., the stress susceptible group has greater log2 expression for that gene than the no stress group), then that gene is also likely to have a positive log2FC for the stress resilient vs. no stress comparison.

#Similarly, if a gene shows a negative log2FC for the stress susceptible vs. no stress comparison (i.e., the stress susceptible group has lower log2 expression for that gene than the no stress group), then that gene is also likely to have a negative log2FC for the stress resilient vs. no stress comparison.

#This means that the differential expression results associated with the stress susceptible and stress resilient comparisons are positively correlated - they show a similar direction of effect.

#We can illustrate this by adding a trendline to the plot:

#We use a linear regression model to calculate the intercept and slope for the linear relationship between the two variables using the y~x formula above:
Trendline<-lm(MetaAnalysis_FoldChanges$GSE109315_StressResilient_Vs_Ctrl~MetaAnalysis_FoldChanges$GSE109315_StressSusceptible_Vs_Ctrl)
#And then add that line to our scatterplot:
abline(Trendline, col=2, lwd=3)

#If we want to know whether that linear relationship is stronger than we might expect due to random chance:
summary.lm(Trendline)
# Call:
#   lm(formula = MetaAnalysis_FoldChanges$GSE109315_StressResilient_Vs_Ctrl ~ 
#        MetaAnalysis_FoldChanges$GSE109315_StressSusceptible_Vs_Ctrl)
# 
# Residuals:
#   Min      1Q  Median      3Q     Max 
# -4.2960 -0.2212 -0.0068  0.2179  4.7673 
# 
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)    
# (Intercept)                                                  0.008552   0.002710   3.156   0.0016 ** 
#   MetaAnalysis_FoldChanges$GSE109315_StressSusceptible_Vs_Ctrl 0.739991   0.006558 112.842   <2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
# 
# Residual standard error: 0.507 on 35178 degrees of freedom
# (3878 observations deleted due to missingness)
# Multiple R-squared:  0.2658,	Adjusted R-squared:  0.2657 
# F-statistic: 1.273e+04 on 1 and 35178 DF,  p-value: < 2.2e-16

#The estimate for intercept is where the trend line crosses the y-axis
#The estimate for "Stress Susceptible vs. Control" is the slope - how much of an increase in Log2FC you should expect in the "Stress Resilient vs. Control" if you see a one unit increase in Log2FC for "Stress Susceptible vs. Control" 
#The Pr(>|t|) is the p-value for that relationship, in this case it is smaller than R is willing to display (<2e-16)

#If we want to gene a normalized correlation coefficient for this relationship (ranging between -1 to 1, with -1 being a perfect negative correlation and +1 being a perfect positive correlation), we can run a correlation analysis:
#While running this correlation analysis, we have to tell R to ignore any rows of differential expression output that don't have Log2FC for one of our variables (use "pairwise complete observations")
cor(MetaAnalysis_FoldChanges$GSE109315_StressResilient_Vs_Ctrl,MetaAnalysis_FoldChanges$GSE109315_StressSusceptible_Vs_Ctrl, use="pairwise.complete.obs")
#[1] 0.5155259


#So here's where things get particularly cool: 
#We can actually run a correlation analysis comparing the Log2FC for every set of differential expression results in our meta-analysis using a single line of code.
#This is called a correlation matrix.
cor(as.matrix(MetaAnalysis_FoldChanges[,-1]), use="pairwise.complete.obs")
# GSE27532_Despipramine_vs_control GSE47541_Venlafaxine_vs_control
# GSE27532_Despipramine_vs_control                            1.000000000                     0.010647948
# GSE47541_Venlafaxine_vs_control                             0.010647948                     1.000000000
# GSE56028_Fluoxetine_vs_Control                              0.071588033                     0.023993750
# GSE56028_Imipramine_vs_Control                             -0.007977753                     0.043699342
# GSE56028_Agomelatine_vs_Control                            -0.121504815                     0.049036499
# GSE61301.Impiramine.vs..Control                            -0.015727034                     0.010017442
# GSE84183_30.kg_Venlafaxine_vs_Control                      -0.004951095                    -0.027106718
# GSE84183_100.kg_Venlafaxine_vs_Control                      0.039013859                     0.009938658
# GSE84183_Fluoxetine_vs_Control                              0.063049524                     0.003182594
# GSE56028_Fluoxetine_vs_Control GSE56028_Imipramine_vs_Control
# GSE27532_Despipramine_vs_control                          0.071588033                   -0.007977753
# GSE47541_Venlafaxine_vs_control                           0.023993750                    0.043699342
# GSE56028_Fluoxetine_vs_Control                            1.000000000                    0.461896318
# GSE56028_Imipramine_vs_Control                            0.461896318                    1.000000000
# GSE56028_Agomelatine_vs_Control                           0.202328024                    0.258381323
# GSE61301.Impiramine.vs..Control                           0.043503666                    0.108155131
# GSE84183_30.kg_Venlafaxine_vs_Control                     0.005224752                   -0.102922104
# GSE84183_100.kg_Venlafaxine_vs_Control                    0.047161264                   -0.040608628
# GSE84183_Fluoxetine_vs_Control                           -0.003250172                   -0.018881715
# GSE56028_Agomelatine_vs_Control GSE61301.Impiramine.vs..Control
# GSE27532_Despipramine_vs_control                           -0.12150481                     -0.01572703
# GSE47541_Venlafaxine_vs_control                             0.04903650                      0.01001744
# GSE56028_Fluoxetine_vs_Control                              0.20232802                      0.04350367
# GSE56028_Imipramine_vs_Control                              0.25838132                      0.10815513
# GSE56028_Agomelatine_vs_Control                             1.00000000                      0.07872115
# GSE61301.Impiramine.vs..Control                             0.07872115                      1.00000000
# GSE84183_30.kg_Venlafaxine_vs_Control                       0.02083387                      0.05119357
# GSE84183_100.kg_Venlafaxine_vs_Control                      0.05224357                      0.05101361
# GSE84183_Fluoxetine_vs_Control                             -0.01761366                     -0.05144202
# GSE84183_30.kg_Venlafaxine_vs_Control
# GSE27532_Despipramine_vs_control                                -0.004951095
# GSE47541_Venlafaxine_vs_control                                 -0.027106718
# GSE56028_Fluoxetine_vs_Control                                   0.005224752
# GSE56028_Imipramine_vs_Control                                  -0.102922104
# GSE56028_Agomelatine_vs_Control                                  0.020833871
# GSE61301.Impiramine.vs..Control                                  0.051193570
# GSE84183_30.kg_Venlafaxine_vs_Control                            1.000000000
# GSE84183_100.kg_Venlafaxine_vs_Control                           0.575648835
# GSE84183_Fluoxetine_vs_Control                                  -0.109307217
# GSE84183_100.kg_Venlafaxine_vs_Control
# GSE27532_Despipramine_vs_control                                  0.039013859
# GSE47541_Venlafaxine_vs_control                                   0.009938658
# GSE56028_Fluoxetine_vs_Control                                    0.047161264
# GSE56028_Imipramine_vs_Control                                   -0.040608628
# GSE56028_Agomelatine_vs_Control                                   0.052243571
# GSE61301.Impiramine.vs..Control                                   0.051013615
# GSE84183_30.kg_Venlafaxine_vs_Control                             0.575648835
# GSE84183_100.kg_Venlafaxine_vs_Control                            1.000000000
# GSE84183_Fluoxetine_vs_Control                                   -0.098994691
# GSE84183_Fluoxetine_vs_Control
# GSE27532_Despipramine_vs_control                          0.063049524
# GSE47541_Venlafaxine_vs_control                           0.003182594
# GSE56028_Fluoxetine_vs_Control                           -0.003250172
# GSE56028_Imipramine_vs_Control                           -0.018881715
# GSE56028_Agomelatine_vs_Control                          -0.017613662
# GSE61301.Impiramine.vs..Control                          -0.051442021
# GSE84183_30.kg_Venlafaxine_vs_Control                    -0.109307217
# GSE84183_100.kg_Venlafaxine_vs_Control                   -0.098994691
# GSE84183_Fluoxetine_vs_Control                            1.000000000


#I find that these correlation matrices can be a little easier to look at in Excel, so I often output them into a file:
write.csv(cor(as.matrix(MetaAnalysis_FoldChanges[,-1]), use="pairwise.complete.obs"), "CorMatrix_HC_StressComparisons_Log2FC.csv")

#In the output, each cell includes the correlation coefficient reflecting the similarity of the effects for the variable in the row and column.  
#So at the intersection of the row for "StressSusceptible_Vs_Control" and column "StressResilient_Vs_Control" we can see the correlation coefficient that we calculated earlier (0.5155)
#The intersection of a variable with itself creates a coefficient of 1 (i.e., identical)

#Looking at the full matrix, most of the correlation coefficients are very close to 0.
#The only correlation coefficients that are larger, positive numbers are comparisons that come from the same dataset originally. e.g., "StressSusceptible_Vs_Control" and  "StressResilient_Vs_Control"

#Disappointing, but not surprising.  The comparisons that come from the same dataset (e.g.) often reflect comparisons with the same reference group. Therefore, any random variation in the reference group is going to be artificially shared in the differential expression results for both comparisons.


#You can also visualize that correlation matrix using a hierarchically-clustered heatmap:
heatmap(cor(as.matrix(MetaAnalysis_FoldChanges[,-1]), use="pairwise.complete.obs"))
#In this heatmap, white/yellow indicates a more positive correlation
#The groups are placed in order by similarity, as determined by hierarchical clustering.
#The lines ("tree branches") on the left and top illustrate that similarity (clustering) using a "dendrogram"


#################################


#8) Run a meta-analysis using all of the effect sizes for each gene that has data from at least 2 studies. 


#We can only run a meta-analysis if there are differential expression results from more than one comparison.
#Since I know that the differential expression results from the same study (dataset) are artificially correlated, I would actually prefer that there are results from more than one dataset.

#How many genes satisfy this criteria?

#This code caculates the number of NAs in each row:
MetaAnalysis_FoldChanges_NAsPerRow<-apply(MetaAnalysis_FoldChanges, 1, function(y) sum(is.na(y)))

#I'm going to make a histogram of the results because I'm curious to see how they are distributed
hist(MetaAnalysis_FoldChanges_NAsPerRow)


#Or, since there are a limited number of integer answers (0-11), I could make a table of the results:
table(MetaAnalysis_FoldChanges_NAsPerRow)
#MetaAnalysis_FoldChanges_NAsPerRow
#0     1     2     3     4     5     6     7     8 
#2648  4929  4527  1110   901  2721  2995  2188 23058  

#So approximately 1/4 of the genes are found in all 11 sets of differential expression results (0 NAs)
#Approximately 1/3 of the genes are only found in 2 or 3 of the sets of differential expression results (9-10 NAs)

#Let's try running a meta-analysis using genes that were found in at least 7 sets of differential expression results
#Since there are 11 sets of differential expression results, that means that the genes that we are including need to have 4 or fewer NAs in their results

#5 NAs is too many

RunBasicMetaAnalysis<-function(NumberOfComparisons, CutOffForNAs, MetaAnalysis_FoldChanges, MetaAnalysis_SV){
  
  MetaAnalysis_FoldChanges_NAsPerRow<-apply(MetaAnalysis_FoldChanges, 1, function(y) sum(is.na(y)))
  
  print("Table of # of NAs per Row (Gene):")
  print(table(MetaAnalysis_FoldChanges_NAsPerRow))
  
  MetaAnalysis_FoldChanges_ForMeta<<-MetaAnalysis_FoldChanges[MetaAnalysis_FoldChanges_NAsPerRow<CutOffForNAs,]
  MetaAnalysis_SV_ForMeta<<-MetaAnalysis_SV[MetaAnalysis_FoldChanges_NAsPerRow<CutOffForNAs,]
  
  print("MetaAnalysis_FoldChanges_ForMeta:")
  print(str(MetaAnalysis_FoldChanges_ForMeta))
  
  #I'm going to make an empty matrix to store the results of my meta-analysis:
  metaOutput<-matrix(NA, length(MetaAnalysis_FoldChanges_ForMeta$x), 6)
  
  #And then run a loop that run's a meta-analysis on the differential expression results (columns 2-10) for each gene (row):
  for(i in c(1:length(MetaAnalysis_FoldChanges_ForMeta$x))){
    
    effect<-as.numeric(MetaAnalysis_FoldChanges_ForMeta[i,-1])
    var<-as.numeric(MetaAnalysis_SV_ForMeta[i,-1])
    
    #I added a function tryCatch that double-checks that the meta-analysis function (rma) doesn't produce errors (which breaks the loop):
    skip_to_next <- FALSE
    tryCatch(TempMeta<-rma(effect, var), error = function(e) {skip_to_next <<- TRUE})
    
    if(skip_to_next){}else{
      TempMeta<-rma(effect, var)
      metaOutput[i, 1]<-TempMeta$b #gives estimate Log2FC
      metaOutput[i, 2]<-TempMeta$se #gives standard error
      metaOutput[i, 3]<-TempMeta$pval #gives pval
      metaOutput[i, 4]<-TempMeta$ci.lb #gives confidence interval lower bound
      metaOutput[i, 5]<-TempMeta$ci.ub #gives confidence interval upper bound
      metaOutput[i, 6]<-NumberOfComparisons-sum(is.na(effect))#Number of comparisons with data
      rm(TempMeta)
    }
    rm(effect, var)
  }
  
  colnames(metaOutput)<-c("Log2FC_estimate", "SE", "pval", "CI_lb", "CI_ub", "Number_Of_Comparisons")
  row.names(metaOutput)<-MetaAnalysis_FoldChanges_ForMeta$x
  
  metaOutput<<-metaOutput
  return(metaOutput)
  
  print("metaOutput:")
  print(str(metaOutput))
  
  print("Top of metaOutput:")
  print(head(metaOutput))
  
  print("Bottom of metaOutput")
  print(tail(metaOutput))
  
}

#Example Usage:
NumberOfComparisons=9
CutOffForNAs=4
#I want at least 7 datasets (so 5 na's is too many)

metaOutput<-RunBasicMetaAnalysis(NumberOfComparisons, CutOffForNAs, MetaAnalysis_FoldChanges, MetaAnalysis_SV)
#Note: this function can take a while to run, especially if you have a lot of data  
#Plug in your computer, take a break, grab some coffee...

# [1] "Table of # of NAs per Row (Gene):"
# MetaAnalysis_FoldChanges_NAsPerRow
# 0    1    2    3    4    5    6    7    8    9   10 
# 9070 4434 1490 1582 1313 1135 3040 3442 1221 9822 2509 
# [1] "MetaAnalysis_FoldChanges_ForMeta:"
# 'data.frame':	17889 obs. of  12 variables:
#   $ x                                  : chr  "0610005C13Rik" "0610009B22Rik" "0610009L18Rik" "0610010F05Rik" ...
# $ GSE109315_StressResilient_Vs_Ctrl  : num  -0.7895 0.3921 -0.4718 -0.0136 -0.188 ...
# $ GSE109315_StressSusceptible_Vs_Ctrl: num  0.0791 -0.279 0.0642 -0.1109 0.0157 ...
# $ GSE116009_CUMS_vs_Control          : num  NA 0.08169 -0.3167 -0.0491 0.00719 ...
# $ GSE132819_CSDS_vs_Ctrl             : num  NA -0.09734 -0.00622 NA 0.0192 ...
# $ GSE151807_CMS_vs_Ctrl              : num  -0.2051 -0.1937 -0.2101 -0.0245 -0.3498 ...
# $ GSE56028_CMS_vs_Ctrl               : num  NA NA NA NA NA NA NA NA NA NA ...
# $ GSE59070_Stress8days_vs_Acute      : num  -0.00551 0.16795 -0.09224 -0.05196 -0.02993 ...
# $ GSE59070_Stress13days_vs_Acute     : num  0.1983 0.0759 -0.1685 -0.036 -0.0333 ...
# $ GSE81672_StressResistent_vs_Ctrl   : num  0.155 0.1 -0.1075 -0.0212 -0.0457 ...
# $ GSE81672_StressSusceptible_vs_Ctrl : num  0.9419 -0.0184 -0.1392 -0.0749 -0.0587 ...
# $ GSE84183_CMS_vs_Ctrl               : num  NA -0.0125 -0.0282 NA -0.0238 ...
# NULL
# There were 50 or more warnings (use warnings() to see the first 50)

str(metaOutput)
#num [1:13214, 1:6] 0.0322 0.0155 0.0559 0.011 -0.0345 ...
#- attr(*, "dimnames")=List of 2
#..$ : chr [1:13214] "A1bg" "A3galt2" "A4galt" "Aaas" ...
#..$ : chr [1:6] "Log2FC_estimate" "SE" "pval" "CI_lb" ...

head(metaOutput)
#                 Log2FC_estimate          SE        pval       CI_lb        CI_ub Number_Of_Comparisons
# 0610005C13Rik   -0.0325103784 0.116647983 0.780471211 -0.26113622  0.196115468                     7
# 0610009B22Rik   -0.0006324904 0.050853168 0.990076502 -0.10030287  0.099037888                    10
# 0610009L18Rik   -0.0884931270 0.032116119 0.005861834 -0.15143956 -0.025546691                    10
# 0610010F05Rik   -0.0391341232 0.025806845 0.129412132 -0.08971461  0.011446363                     8
# 0610010K14Rik   -0.0654136223 0.039271822 0.095780550 -0.14238498  0.011557735                    10
# 0610025J13Rik   -0.0099393092 0.007539784 0.187420449 -0.02471701  0.004838395                     9

tail(metaOutput)
#            Log2FC_estimate         SE      pval        CI_lb       CI_ub Number_Of_Comparisons
# Macf1     -0.002941478 0.01738809 0.8656659 -0.037021502 0.031138546                     9
# Malat1     0.078979811 0.12193120 0.5171526 -0.160000946 0.317960569                     8
# Map2       0.015123787 0.03301830 0.6469219 -0.049590893 0.079838467                     9
# Pcdh9      0.012891547 0.01753582 0.4622450 -0.021478026 0.047261121                     9
# Sptan1     0.021281603 0.01526441 0.1632579 -0.008636086 0.051199293                     9
# Syne1     -0.030869644 0.02062401 0.1344501 -0.071291964 0.009552675                     8

########################################

#Let's functionalize it!
FalseDiscoveryCorrection<-function(metaOutput){
  
  tempPvalAdjMeta<-mt.rawp2adjp(metaOutput[,3], proc=c("BH"))
  
  metaPvalAdj<-tempPvalAdjMeta$adjp[order(tempPvalAdjMeta$index),]
  
  metaOutputFDR<-cbind(metaOutput, metaPvalAdj[,2])
  
  colnames(metaOutputFDR)[7]<-"FDR"
  
  metaOutputFDR<<-metaOutputFDR
  
  print("metaOutputFDR:")
  print(str(metaOutputFDR))
  
  write.csv(metaOutputFDR, "metaOutputFDR.csv")
  
  #a version of the output in order by p-value:
  metaOutputFDR_OrderbyPval<<-metaOutputFDR[order(metaOutputFDR[,3]),]
  
  #Let's write out a version of the output in order by p-value:
  write.csv(metaOutputFDR_OrderbyPval, "metaOutputFDR_orderedByPval_wHDRFData.csv")
  
  print("Do we have any genes that are statistically significant following false discovery rate correction?")
  print(sum(metaOutputFDR[,7]<0.10, na.rm=TRUE))
  
  print("What are the top results?")
  print(head(metaOutputFDR[order(metaOutputFDR[,3]),]))
  
  rm(tempPvalAdjMeta, metaPvalAdj)
  
}

